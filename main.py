import pytest


@pytest.mark.asyncio
async def test_logout(event_loop):
    # Данные для входа
    login_data = {
        "username": "testuser",
        "password": "testpass"
    }
    # Отправляем POST-запрос к API для входа и получаем токен доступа
    async with httpx.AsyncClient() as client:
        response = await client.post(API_URL + "/login", json=login_data)
        token = response.json()["access_token"]
    # Отправляем POST-запрос к API для выхода с токеном в заголовке Authorization
    async with httpx.AsyncClient() as client:
        response = await client.post(API_URL + "/logout", headers={"Authorization": f"Bearer {token}"})
    # Проверяем, что статус ответа 200 (OK)
    assert response.status_code == 200
    # Проверяем, что токен больше не действителен
    assert "detail" in response.json() and response.json()["detail"] == "Successfully logged out"

@pytest.mark.asyncio
async def test_password_reset(event_loop):
    # Данные для запроса на сброс пароля
    reset_data = {
        "email": "testuser@example.com"
    }
    # Отправляем POST-запрос к API для сброса пароля
    async with httpx.AsyncClient() as client:
        response = await client.post(API_URL + "/password/reset", json=reset_data)
    # Проверяем, что статус ответа 200 (OK) или 202 (Accepted), в зависимости от реализации
    assert response.status_code in (200, 202)
    # Проверяем, что тело ответа содержит сообщение об успешном запросе на сброс пароля
    assert "detail" in response.json() and response.json()["detail"] == "Password reset email sent"

@pytest.mark.asyncio
async def test_user_search(event_loop):
    # Данные для поиска пользователя
    search_data = {
        "username": "testuser"
    }
    # Отправляем GET-запрос к API для поиска пользователя
    async with httpx.AsyncClient() as client:
        response = await client.get(API_URL + "/user/search", params=search_data)
    # Проверяем, что статус ответа 200 (OK)
    assert response.status_code == 200
    # Проверяем, что тело ответа содержит информацию о найденном пользователе
    assert "username" in response.json() and response.json()["username"] == "testuser"

# Для улучшения сайта на основе результатов тестирования, вам могут пригодиться следующие рекомендации:
#
# Покрытие кода: Расширьте покрытие тестов, чтобы охватить больше критически важных частей кода. Это поможет выявить потенциальные проблемы и уменьшить вероятность возникновения ошибок в боевой среде.
#
# Интеграционное тестирование: Добавьте интеграционные тесты для проверки взаимодействия между различными компонентами вашего веб-приложения. Убедитесь, что все части взаимодействуют корректно вместе.
#
# Тесты на производительность: Проведите тестирование производительности, чтобы удостовериться, что ваш сайт может обрабатывать нагрузку. Идентифицируйте и устраните узкие места, которые могут привести к задержкам.
#
# Тестирование безопасности: Проведите тестирование на безопасность, включая проверку на уязвимости, защиту от атак и соблюдение стандартов безопасности.
#
# Мониторинг тестов: Внедрите систему мониторинга результатов тестов, чтобы быстро реагировать на любые сбои в работе или снижение производительности.
#
# Автоматизация тестирования: Если у вас есть повторяющиеся тесты, автоматизируйте их выполнение. Это поможет вам быстрее обнаруживать и исправлять проблемы.
#
# Тестирование на различных браузерах и устройствах: Если ваш веб-приложение предназначено для работы в различных браузерах и на различных устройствах, удостоверьтесь, что тесты охватывают этот разнообразный спектр.
#
# Обратная связь от пользователей: Проведите бета-тестирование среди реальных пользователей и получите обратную связь по их впечатлениям и обнаруженным проблемам.
#
# Постоянное обновление тестов: Сайты часто изменяются, и тесты должны соответствовать текущей функциональности. Регулярно обновляйте ваши тесты, чтобы они оставались актуальными.
#
# Использование инструментов анализа кода: Воспользуйтесь инструментами анализа кода для выявления потенциальных проблем, улучшения читаемости кода и поддержания стандартов.
#
# Эти рекомендации помогут вам создать стабильный, производительный и безопасный веб-сайт на основе результатов тестирования.